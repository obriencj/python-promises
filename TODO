Here are the basic ideas for this project

- support for promises/futures

- differ from the PEP-3148 http://www.python.org/dev/peps/pep-3148/ in
  which promises are only write-once slots for a value, which need to
  be written to by an outside actor. We're commingling the ideas of
  promises and futures in this implementation.

- the most basic promise is a memoized zero-argument (nullary) function

- provide container-based promises, which are simply the above with
  methods allowing to detect whether the promise has been delivered,
  and to perform a (possibly blocking) delivery

- provide a transparent proxy based promise, which are similar to the
  above, but with no methods. Any attempt to "use" the proxy (member
  access), will result in blocking delivery.

- In addition, provide ispromise(p) isdelivered(p) and deliver(p)
  functions which will work on both container and transparent proxy
  promises.

- create a multiprocessing-enabled facility for both types of promises

- abstract promise delivery so that any underlying delivery mechanism
  can be used with either container or transparent proxies

- create an xmlrpc multicall which utilizes both types of promises

- as I write this, I am becoming aware that someone is going to become
  confused by my naming conventions vs the naming conventions all the
  other promise/future/defer/delay implementations use. I may need to
  change names all over the place...